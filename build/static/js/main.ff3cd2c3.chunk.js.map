{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["AWS","require","table_name","App","docClient","DynamoDB","DocumentClient","useState","ContactName","ContactNumber","contacts","setContacts","forceUpdate","params","TableName","useEffect","scan","err","data","console","log","JSON","stringify","Items","className","map","value","key","id","onSubmit","evnt","preventDefault","contactName","target","elements","contactNumber","Item","put","error","for","type","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEMA,EAAMC,EAAQ,IAGhBC,EAAa,iBA2EFC,MAzEf,WACE,IAAMC,EAAY,IAAIJ,EAAIK,SAASC,eAEnC,EAAgCC,mBAAS,CAAC,CAAEC,YAAa,GAAIC,cAAe,MAA5E,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBJ,qBAAfK,EAAT,oBAEIC,EAAS,CACXC,UAAUZ,GAuCZ,OArCAa,qBAAU,WACNX,EAAUY,KAAKH,GAAO,SAACI,EAAKC,GAC1B,GAAID,EAEF,OADAE,QAAQC,IAAI,4BAA+BC,KAAKC,UAAUL,EAAK,KAAM,IAC9D,CAACA,OAERE,QAAQC,IAAI,2BACZT,EAAYO,EAAKK,YAGpB,IA4BH,sBAAKC,UAAU,MAAf,UACE,kDACA,uBACA,8CACA,kCACE,+BAAI,8CAAqB,mDACtBd,EAASe,KAAI,SAACC,EAAOC,GACpB,OAAO,+BAAI,6BAAKD,EAAMlB,cAAiB,6BAAKkB,EAAMjB,yBAGxD,uBACA,kDACA,qBAAKmB,GAAG,iBAAR,SACE,uBAAMC,SAtCO,SAACC,GAClBA,EAAKC,iBACL,IAAIC,EAAcF,EAAKG,OAAOC,SAASF,YAAYN,MAC/CS,EAAgBL,EAAKG,OAAOC,SAASC,cAAcT,MACvDP,QAAQC,IAAI,eAAgBY,EAAa,IAAKG,GAC9C,IAAItB,EAAS,CACTC,UAAUZ,EACVkC,KAAK,CACD,YAAeJ,EACf,cAAiBG,IAIzB/B,EAAUiC,IAAIxB,GAAQ,SAASI,EAAKC,GAC5BD,EACAE,QAAQmB,MAAM,kCAAmCjB,KAAKC,UAAUL,EAAK,KAAM,KAE3EE,QAAQC,IAAI,cAAeC,KAAKC,UAAUJ,EAAM,KAAM,IACtDN,SAoBJ,UACI,uBAAO2B,IAAI,QAAX,oBAAiC,uBACjC,uBAAOC,KAAK,OAAOZ,GAAG,cAAca,KAAK,gBAAe,uBACxD,uBAAOF,IAAI,QAAX,6BAA0C,uBAC1C,uBAAOC,KAAK,OAAOZ,GAAG,gBAAgBa,KAAK,kBAC3C,wBAAQD,KAAK,SAAb,kCC5DGE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ff3cd2c3.chunk.js","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nconst AWS = require('aws-sdk');\n\n/*AWS.config.update({region: \"us-east-1\"});*/\nvar table_name = \"contacts-table\" ;\n\nfunction App() {\n  const docClient = new AWS.DynamoDB.DocumentClient();\n\n  const [contacts, setContacts] = useState([{ ContactName: \"\", ContactNumber: \"\" }]);\n  const [, forceUpdate] = useState();\n  \n  var params = {\n    TableName:table_name,\n  }\n  useEffect(() => {\n      docClient.scan(params,(err, data) => {\n        if (err) {\n          console.log(\"Error scanning dynamoddb \" +  JSON.stringify(err, null, 2));\n          return {err}\n        } else {\n          console.log(\"Got value from DynamoDB\");\n          setContacts(data.Items)\n        }\n      });\n    }, []);\n\n\n  const addContact = (evnt) => {\n    evnt.preventDefault();\n    var contactName = evnt.target.elements.contactName.value\n    var contactNumber = evnt.target.elements.contactNumber.value\n    console.log(\"Add Contact \"+ contactName +\",\"+ contactNumber);\n    var params = {\n        TableName:table_name,\n        Item:{\n            \"ContactName\": contactName,\n            \"ContactNumber\": contactNumber,\n        }\n    };\n    \n    docClient.put(params, function(err, data) {\n        if (err) {\n            console.error(\"Unable to add item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"Added item:\", JSON.stringify(data, null, 2));\n            forceUpdate();\n        }\n    });\n    return;\n  };\n  \n  return (\n    <div className=\"App\">\n      <h1>Contact List App</h1>\n      <br/>\n      <h2>Contact List</h2>\n      <table>\n        <tr><td>Contact Name</td><td>Contact Number</td></tr>\n          {contacts.map((value, key) => {\n            return <tr><td>{value.ContactName}</td><td>{value.ContactNumber}</td></tr>\n          })}\n      </table>\n      <br/>\n      <h2>Add New Contact </h2>\n      <div id=\"addContactForm\">\n        <form onSubmit={addContact}>\n            <label for=\"fname\">Name :</label><br/>\n            <input type=\"text\" id=\"contactName\" name=\"contactName\"/><br/>\n            <label for=\"lname\">Contact Number:</label><br/>\n            <input type=\"text\" id=\"contactNumber\" name=\"contactNumber\"/>\n            <button type=\"submit\">Add Contact</button>\n        </form>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}